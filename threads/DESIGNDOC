			+--------------------+
			|        CS 140      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Stefan Geyer <stefan.geyer@student.tuwien.ac.at>
Markus Hinterleitner <e01631852@student.tuwien.ac.at>
Rene Hollander <rene.hollander@tuwien.ac.at>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.


			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

typedef struct {
    ...
} stack_t;

Generic stack data structure used to keep track of the donations.

struct thread {
    ...
    stack_t priority_donations; // difference (0 if negative) of donated and effective priority
    int effective_priority; // current priority (sum of stack + own)
    ...
}

Each thread tracks it's own donations.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

Order the list of ready threads by priority and take first element (Sort ready_list by effective priority)

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

1) Figure out current lock holder. => lock.holder
2) Donate the current thread's priority to the blocking thread (see data structure segment)
3) Preempt running thread (thread_yield())

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

1) lock_release calls sema_up() which unblocks the next waiting thread
2) if thread_current().effective_priority < chosen.effective_priority -> thread_yield()

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

1) Set new priority on struct
2) Calculate new effective priority
3) Yield to ensure highest priority thread is scheduled
4) Steps 1 and 2 must be atomic to make sure every thread always has the correct priority

Disable interrupts to avoid acquiring a lock with the old priority.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?