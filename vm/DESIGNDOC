       	    +---------------------------+
		    |         ProgOS		    |
		    | PROJECT 2: VIRTUAL MEMORY	|
		    |	   DESIGN DOCUMENT  	|
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Stefan Geyer <stefan.geyer@student.tuwien.ac.at>
Markus Hinterleitner <e01631852@student.tuwien.ac.at>
Rene Hollander <rene.hollander@tuwien.ac.at>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================
!!!! DISCLAIMER !!!!

syn-read and syn-write tests are failing for unknown reasons. Some threads that are started by the
parent cause a pagefault with fault address 0x00. Debugging this is extremly hard, as gdb won't
show the full backtrace and printfs are not shown as the process is a child process. Reducing
the size of the threads that are created to 2 for each test makes them pass.

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

enum spte_type {
  SPTE_TYPE_FILE = 1,
  SPTE_TYPE_MEMORY_MAPPED_FILE = 2,
};

Used in spte struct

struct spte {
  void *vaddr;
  bool loaded;
  struct file *file;
  off_t offset;
  enum spte_type type;
  union {
    struct {
      uint32_t read_bytes;
      uint32_t zero_bytes;
      bool writable;
    } file_data;
    struct {
      int id;
      off_t length;
    } memory_mapped_file_data;
  };

  struct hash_elem elem;
  struct list_elem remove_elem;
};

Struct that represents a supplemental page table entry.
Supports both executable and mmap entries.

typedef int spt_action_func (struct spte *e, void *aux);

Function definition used for table iterating

struct thread
  {
    ...
    struct hash supplemental_page_table;

    int mmapid_counter;
    int stack_size;                     /* Current size of the stack. */
    void *saved_esp;                    /* Saved esp when switching from user to kernel. */
    ...
  };

---- IMPLEMENTATION ----
>> A2: Describe how you implemented lazy page loading. How do you
>> determine the file and file offset corresponding to a virtual
>> address?

The supplemental page table gets setup in load_segment with the correct offsets in the file.
As soon as a page fault occurs, a hashtable will be checked to get the right entry. If no
such entry exists, a segfault will be triggered. The offset and file in the supplemental page
table entry will be used to load the data into a new page. The page will be installed and the
program resumes.

---- SYNCHRONIZATION ----
>> A3: How do you deal with or prevent page faults in file system
>> routines. Argue why your solution is deadlock free.

As the current read and write syscall implementations first copy the user data to a newly
allocated page, or into a kernel page and then to the user buffer, all page faults occur
outside of the file system code. This way not deadlocks can occur, as the copying can is
not done inside of a critical section that is related to the file system code.


			    STACK GROWTH
			    ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread {
  ...
  int stack_size;                     /* Current size of the stack. */
  void *saved_esp;                    /* Saved esp when switching from user to kernel. */
  ...
stack_size is used to detect overlaps with a mmap call. saved_esp is set to the esp of
the user stack when switching to kernel code.

---- IMPLEMENTATION ----
>> B2: Describe how you integrated the (potentially growing) stack segment
>> into your page table management implementation.

If the conditions below hold, a new page will be allocated and installed to be used for stack data. The
stack_size will be increased accordingly. The entry is not added to the supplemental page table as it
is not needed.

---- ALGORITHMS ----
>> B3: Explain how you detect a page fault which should trigger a
>> stack growth. What asssumptions are needed for your implementation
>> to work?

The page fault handler checks if the fault address is 4 or 32 bytes after the esp or bigger then esp and
smaller than PHYS_BASE. To avoid growing the stack too large, it is limited to 8MB. ESP is read from the
interrupt frame when the fault occured in user code, or from the threads saved_esp when it occurs in kernel
code.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct munmap_action_data {
  uint32_t *pagedir;
  struct list *to_remove;
  struct file *to_close;
};

Maps together the data for each mmap mapping

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.

Add mmap and munmap hooks for the syscall handler and add the custom implementation there.
Perform all the checks mentioned in the task description. Get the file length and check how
many entries are to be added. If the file's size is 5 * PGSIZE, 5 entries should be added with
the correct offset. The last entry might have a smaller size if the file size ist not dividable
by PGSIZE. The mapping id is generated using a variable in the thread struct which is incremented
on each access.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

Before adding the mappings perform an iterative check for each page that would be mapped for the file
and make sure there is no page mapped at this address already. If there are none the file may be mapped.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

We use the same SPT struct for both mmap and executable mappings.
Therefore a lot of code can be shared for segments such as lazy loading.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
